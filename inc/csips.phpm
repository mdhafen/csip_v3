<?php
require_once( $config['base_dir'] ."/lib/data.phpm" );

require_once( 'category.phpm' );

function loc_is_demo( $field, $value, $csip = null ) {
  if ( $csip && isset( $csip['loc_demo'] ) ) {
    return ( $csip['loc_demo'] == 1 );
  } else {
    $dbh = db_connect();

    $query = "
 SELECT loc_demo
   FROM activity
  CROSS JOIN goal USING ( goalid )
  CROSS JOIN csip USING ( csipid )
  CROSS JOIN location USING ( locationid )
";
    switch ( $field ) {
    case 'activity' : $query .= "WHERE activityid = :value"; break;
    case 'goal'     : $query .= "WHERE goalid = :value"; break;
    case 'csip'     : $query .= "WHERE csipid = :value"; break;
    default: $field = null;
    }

    if ( $field ) {
      $sth = $dbh->prepare( $query );
      $sth->bindValue( ':value', $value );
      $sth->execute();
      return ( $sth->fetchColumn() == 1 );
    } else {
      return 1;  // default to demo
    }
  }
}

function new_year( $new ) {
  $dbh = db_connect();

  $query = "INSERT INTO year ( year_name, version, sap_due_date, csip_due_date, board_due_date, district_due_date ) VALUES ( :name, :version, :sap_due, :csip_due, :board_due, :district_due )";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':name', $new['year_name'] );
  $sth->bindValue( ':version', $new['version'] );
  $sth->bindValue( ':sap_due', $new['sap_due_date'] );
  $sth->bindValue( ':csip_due', $new['csip_due_date'] );
  $sth->bindValue( ':board_due', $new['board_due_date'] );
  $sth->bindValue( ':district_due', $new['district_due_date'] );

  $sth->execute();
  $yearid = $dbh->lastInsertId();

  return $yearid;
}

function get_csips( $locationid = 0, $district = 0, $history = 3 ) {
  $dbh = db_connect();

  $query = "SELECT * FROM csip CROSS JOIN year USING (yearid) CROSS JOIN location USING (locationid) ";
  if ( ! $district ) {
    $query .= "WHERE csip.locationid = ". $locationid ." ";
  }
  if ( $history ) {
    if ( $district ) {
      $query .= "WHERE ";
    } else {
      $query .= "AND ";
    }
    $query .= "yearid > ( SELECT MAX(yearid) - $history FROM year ) ";
  }
  $query .= "ORDER BY yearid DESC, name ASC ";
  $sth = $dbh->prepare( $query );
  $sth->execute();

  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $result[] = stripslashes_array( $row );
  }

  return $result;
}

function get_years_no_csip( $locationid ) {
  if ( ! $locationid ) { return; }

  $dbh = db_connect();

  $result = array();
  $query = "
    SELECT year.*
      FROM year
 LEFT JOIN csip ON csip.yearid = year.yearid AND csip.locationid = $locationid
     WHERE csipid IS NULL
";

  $sth = $dbh->prepare( $query );
  $sth->execute();

  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $result[ $row['yearid'] ] = $row;
  }

  return $result;
}

function new_csip( $year, $locationid ) {
  if ( ! $year || ! $locationid ) { return; }

  $dbh = db_connect();

  $result = array();
  $query = "INSERT INTO csip ( locationid, yearid ) VALUES ( :lid, :yid )";

  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':lid', $locationid );
  $sth->bindValue( ':yid', $year );
  $sth->execute();

  $csipid = $dbh->lastInsertId();

  return $csipid;
}

function load_csip( $csipid = 0 ) {
  $cisp = array();
  if ( ! $csipid ) {
    return;
  }
  $dbh = db_connect();

  $query = "
    SELECT * 
      FROM csip 
CROSS JOIN location USING (locationid) 
CROSS JOIN year USING (yearid)
     WHERE csipid = :cid
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();

  $csip = $sth->fetch( PDO::FETCH_ASSOC );
  $csip = stripslashes_array( $csip );

  // category_specifics can stomp categoryid, so make sure it comes through
  $query = "
   SELECT *,category.categoryid 
     FROM category 
LEFT JOIN category_specifics 
       ON category.categoryid = category_specifics.categoryid 
      AND csipid = :cid 
LEFT JOIN location_category_links
       ON category.categoryid = location_category_links.categoryid
    WHERE version = :ver
      AND ( ( gradelevel >= :mingrade AND gradelevel <= :maxgrade )
       OR ( loc_cat_subcat = :loc_loc OR loc_cat_subcat LIKE :loc_cat OR loc_cat_subcat LIKE :loc_subcat )
       OR ( loc_cat_subcat = 'ALL' )
       OR ( loc_cat_subcat = 'NA' AND gradelevel = 0 )
       OR ( location_category_links.locationid = :loc_link ) )
 ORDER BY category.category_class, category.category_type, category.course_group, category.gradelevel, category.category_name
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->bindValue( ':ver', $csip['version'] );
  $sth->bindValue( ':mingrade', $csip['mingrade'] );
  $sth->bindValue( ':maxgrade', $csip['maxgrade'] );
  $sth->bindValue( ':loc_loc', $csip['locationid'] );
  $sth->bindValue( ':loc_cat', "%$csip[loc_category]%" );
  $sth->bindValue( ':loc_subcat', "%$csip[loc_subcategory]%" );
  $sth->bindValue( ':loc_link', $csip['locationid'] );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $csip['category'][ $row['categoryid'] ] = stripslashes_array( $row );
    $question_groups[ $row['question_group'] ]++;
  }

  $question_groups = implode( ',', array_keys( (array) $question_groups ) );
  $query = "
  SELECT * 
    FROM question 
   WHERE question_group IN ($question_groups)
     AND version = :ver
ORDER BY question_group,order_num
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':ver', $csip['version'] );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $csip['question_group'][ $row['question_group'] ][] = stripslashes_array( $row );
    if ( $row['part'] > $csip['parts'] ) {
      $csip['parts'] = $row['part'];
    }
  }

  $query = "SELECT * FROM answer WHERE csipid = :cid";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    // can't stripslashes here because the answer might be serialized
    $csip['category'][ $row['categoryid'] ]['answer'][ $row['answerid'] ] = $row;
  }

  $query = "SELECT * FROM goal WHERE csipid = :cid";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $csip['category'][ $row['categoryid'] ]['goal'][ $row['goalid'] ] = stripslashes_array( $row );
  }

  $query = "
    SELECT activity.*,goal.categoryid 
      FROM activity 
CROSS JOIN goal USING (goalid) 
     WHERE csipid = :cid
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $csip['category'][ $row['categoryid'] ]['goal'][ $row['goalid'] ]['activity'][ $row['activityid'] ] = stripslashes_array( $row );
  }

  $query = "
    SELECT activity_people.*,goal.goalid,goal.categoryid
      FROM activity_people
CROSS JOIN activity USING (activityid)
CROSS JOIN goal USING (goalid)
     WHERE csipid = :cid
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $csip['category'][ $row['categoryid'] ]['goal'][ $row['goalid'] ]['activity'][ $row['activityid'] ]['activity_people'][ $row['activity_people_id'] ] = stripslashes_array( $row );
  }

  return $csip;
}

function get_csip_locationid( $csipid = 0 ) {
  if ( ! $csipid ) {
    return;
  }

  $dbh = db_connect();

  $query = "
 SELECT locationid
   FROM csip 
  WHERE csipid = :cid
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();

  $csip = $sth->fetch( PDO::FETCH_ASSOC );

  return $csip['locationid'];
}

function get_category_list( $csip = 0 ) {
  if ( ! $csip ) {
    return;
  }

  $question_groups = array();
  $list = array();

  foreach ( (array) $csip['category'] as $cat ) {
    $parts = array();
    if ( $question_groups[ $cat['question_group'] ] ) {
      $parts = $question_groups[ $cat['question_group'] ];
    } else {
      foreach ( (array) $csip['question_group'][ $cat['question_group'] ] as $quest ) {
	if ( $quest['part'] > 0 ) {
	  $parts[ $quest['part'] ] = $quest['part'];
	}
      }
      $question_groups[ $cat['question_group'] ] = $parts;
    }

    if ( cat_has_previous( $cat['categoryid'], $csip['csipid'] ) ) {
      array_unshift( $parts, "P" );
      $list['PREVIOUS'] = 1;
    }

    list( $progress, $report ) = cat_get_goal_completion( $cat['categoryid'], $csip['csipid'] );

    if ( $cat['category_group'] ) {
      $list[ $cat['category_class'] ][ 'group' ][ $cat['category_group'] ][] = array(
		'categoryid' => $cat['categoryid'],
		'category_name' => $cat['category_name'],
		'category_type' => $cat['category_type'],
		'type_target' => $cat['type_target'],
		'category_note' => $cat['category_note'],
		'needs_principal_approve' => $cat['needs_principal_approve'],
		'needs_community_approve' => $cat['needs_community_approve'],
		'needs_district_approve' => $cat['needs_district_approve'],
		'progress_percent' => $progress,
		'report_percent' => $report,
		'parts' => $parts,
      );
    } else {
      $list[ $cat['category_class'] ][] = array(
		'categoryid' => $cat['categoryid'],
		'category_name' => $cat['category_name'],
		'category_type' => $cat['category_type'],
		'type_target' => $cat['type_target'],
		'category_note' => $cat['category_note'],
		'needs_principal_approve' => $cat['needs_principal_approve'],
		'needs_community_approve' => $cat['needs_community_approve'],
		'needs_district_approve' => $cat['needs_district_approve'],
		'progress_percent' => $progress,
		'report_percent' => $report,
		'parts' => $parts,
      );
    }
  }

  return $list;
}

function get_report_list( $csip = 0 ) {
  if ( ! $csip ) {
    return;
  }

  $list = array();

  foreach ( (array) $csip['category'] as $cat ) {
    $parts = array();
    if ( cat_completion( $cat['categoryid'], $csip ) || $cat['category_type'] == 1 ) {
      $list[ $cat['categoryid'] ] = $cat;
      foreach ( (array) $csip['question_group'][ $cat['question_group'] ] as $ques ) {
	if ( ! isset( $parts[ $ques['part'] ] ) ) {
	  $parts[ $ques['part'] ] = cat_part_completion( $cat['categoryid'], $ques['part'], $csip );
	}
	if ( $parts[ $ques['part'] ] ) {
	  $answer = '';
	  $answers = $csip['category'][ $cat['categoryid'] ]['answer'];
	  foreach ( (array) $answers as $ans ) {
	    if ( $ans['questionid'] == $ques['questionid'] ) {
	      $answer = $ans;
	      break;
	    }
	  }
	  $list[ $cat['categoryid'] ]['part'][ $ques['part'] ][] = cat_get_html_report( $ques, $answer, $cat['categoryid'], $csip );
	}
      }
    }
  }

  return $list;
}
?>
