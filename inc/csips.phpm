<?php
require_once( $config['base_dir'] ."/lib/data.phpm" );

require_once( 'course.phpm' );

function loc_is_demo( $field, $value, $csip = null ) {
  if ( $csip && isset( $csip['loc_demo'] ) ) {
    return ( $csip['loc_demo'] == 1 );
  } else {
    $dbh = db_connect();

    $query = "
 SELECT loc_demo
        FROM csip
  CROSS JOIN location USING ( locationid )
";
    switch ( $field ) {
    case 'csip'     : $query .= "WHERE csipid = :value"; break;
    case 'location' : $query .= "WHERE locationid = :value"; break;
    default: $field = null;
    }

    if ( $field ) {
      $sth = $dbh->prepare( $query );
      $sth->bindValue( ':value', $value );
      $sth->execute();
      return ( $sth->fetchColumn() == 1 );
    } else {
      return 1;  // default to demo
    }
  }
}

function new_year( $new ) {
  $dbh = db_connect();

  $query = "INSERT INTO year ( year_name, version, due_dates ) VALUES ( :name, :version, :due_dates )";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':name', $new['year_name'] );
  $sth->bindValue( ':version', $new['version'] );
  $sth->bindValue( ':due_dates', $new['due_dates'] );

  $sth->execute();
  $yearid = $dbh->lastInsertId();

  return $yearid;
}

function get_csips( $locations = array(), $district = 0, $history = 3 ) {
  $dbh = db_connect();
  $result = array();

  $query = "SELECT * FROM csip CROSS JOIN year USING (yearid) CROSS JOIN location USING (locationid) ";
  if ( ! $district && !empty($locations) ) {
    $query .= "WHERE csip.locationid IN (". implode( ',', $locations ) .") ";
  }
  if ( $history ) {
    if ( $district ) {
      $query .= "WHERE ";
    } else {
      $query .= "AND ";
    }
    $query .= "yearid > ( SELECT MAX(yearid) - $history FROM year ) ";
  }
  $query .= "ORDER BY yearid DESC, name ASC ";
  $sth = $dbh->prepare( $query );
  $sth->execute();

  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $result[] = stripslashes_array( $row );
  }

  return $result;
}

function get_years_no_csip( $locationid ) {
  if ( ! $locationid ) { return; }

  $dbh = db_connect();

  $result = array();
  $query = "
    SELECT year.*
      FROM year
 LEFT JOIN csip ON csip.yearid = year.yearid AND csip.locationid = $locationid
     WHERE csipid IS NULL
";

  $sth = $dbh->prepare( $query );
  $sth->execute();

  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $result[ $row['yearid'] ] = $row;
  }

  return $result;
}

function new_csip( $year, $locationid ) {
  if ( ! $year || ! $locationid ) { return; }

  $dbh = db_connect();

  $result = array();
  $query = "INSERT INTO csip ( locationid, yearid ) VALUES ( :lid, :yid )";

  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':lid', $locationid );
  $sth->bindValue( ':yid', $year );
  $sth->execute();

  $csipid = $dbh->lastInsertId();

  return $csipid;
}

function load_csip( $csipid = 0, $userid = 0 ) {
  $csip = array();
  if ( ! $csipid ) {
    return;
  }
  $dbh = db_connect();

  $query = "
    SELECT *
      FROM csip 
CROSS JOIN location USING (locationid) 
CROSS JOIN year USING (yearid)
     WHERE csipid = :cid
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();

  $csip = $sth->fetch( PDO::FETCH_ASSOC );
  $csip = stripslashes_array( $csip );

  $courses = array();
  $query = "
    SELECT *
      FROM user_course_links
     WHERE locationid = :loc
       AND userid = :user
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':loc', $csip['locationid'] );
  $sth->bindValue( ':user', $userid );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $courses[] = $row['courseid'];
  }

  $query = "
    SELECT course.* 
      FROM course
 LEFT JOIN location_course_links USING (courseid)
     WHERE active = 1
";
  if ( ! empty($courses) ) {
    $query .= "       AND courseid IN ". implode( ',',$courses ) .")";
    $courses = array();
  }
  $query .= "
       AND ( ( max_grade >= :mingrade AND min_grade <= :maxgrade )
        OR ( location_course_links.locationid = :loc_link ) )
  ORDER BY course.course_name
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':mingrade', $csip['mingrade'] );
  $sth->bindValue( ':maxgrade', $csip['maxgrade'] );
  $sth->bindValue( ':loc_link', $csip['locationid'] );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $csip['courses'][ $row['courseid'] ] = stripslashes_array( $row );
    $courses[] = $row['courseid'];
  }

  $courselist = implode( ',',$courses );
  $query = "
     SELECT *
       FROM question 
 CROSS JOIN course_question_links using (question_group)
      WHERE version = :ver
        AND courseid IN ($courselist)
   ORDER BY question_group,order_num
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':ver', $csip['version'] );
  $sth->execute();
  $csip['parts'] = 0;
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    $row = stripslashes_array( $row );
    $csip['questions'][ $row['questionid'] ] = $row;
    $csip['courses'][ $row['courseid'] ]['questions'][ $row['part'] ][ $row['questionid'] ] = array();
  }

  $query = "SELECT * FROM answer WHERE csipid = :cid";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();
  while ( $row = $sth->fetch( PDO::FETCH_ASSOC ) ) {
    // can't stripslashes here because the answer might be serialized
    $csip['courses'][ $row['courseid'] ]['questions'][ $row['part'] ][ $row['questionid'] ][ $row['answerid'] ] = $row;
  }

  return $csip;
}

function get_csip_locationid( $csipid = 0 ) {
  if ( ! $csipid ) {
    return;
  }

  $dbh = db_connect();

  $query = "
 SELECT locationid
   FROM csip 
  WHERE csipid = :cid
";
  $sth = $dbh->prepare( $query );
  $sth->bindValue( ':cid', $csipid );
  $sth->execute();

  $csip = $sth->fetch( PDO::FETCH_ASSOC );

  return $csip['locationid'];
}

function get_report_list( $csip = 0 ) {
  if ( ! $csip ) {
    return;
  }

  $list = array();

  foreach ( (array) $csip['course'] as $course ) {
    if ( course_completion( $course['courseid'], $csip ) ) {
      $list[ $course['courseid'] ] = $course;
      foreach ( (array) $course['questions'] as $part => $questions ) {
	if ( course_part_completion($course['courseid'],$part,$csip) ) {
          foreach ( (array) $questions as $questionid => $answer ) {
            $list[ $course['courseid'] ]['questions'][ $part ][ $questionid ] = course_get_html_report( $csip['questions'][$questionid], $answer, $course['courseid'], $csip );
	  }
	}
      }
    }
  }

  return $list;
}
?>
